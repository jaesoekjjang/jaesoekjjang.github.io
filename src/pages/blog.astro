---
import { readAll } from "../lib/markdoc/read";
import { blog } from "../lib/markdoc/frontmatter.schema";
import PageLayout from "../layouts/PageLayout.astro";
import PageMeta from "../components/PageMeta.astro";
import { SITE_TITLE } from "../config";
import BlogContent from "@components/BlogContent";

export type Posts = typeof posts;
export type Post = Posts[number];

const posts = await readAll({
  directory: "blog",
  frontmatterSchema: blog,
});

const sortedPosts = posts
  .filter((p) => p.frontmatter.draft !== true)
  .sort(
    (a, b) =>
      new Date(b.frontmatter.date).valueOf() -
      new Date(a.frontmatter.date).valueOf()
  );

const tags = [
  ...new Set(
    [""].concat(sortedPosts.flatMap(({ frontmatter }) => frontmatter.tag ?? []))
  ),
];
---

<script></script>

<PageLayout>
  <PageMeta title={`Blog | ${SITE_TITLE}`} slot="meta" />
  <section slot="main">
    <BlogContent posts={sortedPosts} tags={tags} client:only />
  </section>
</PageLayout>

<style>
  section {
    position: relative;
  }

  @media (min-width: 640px) {
    section aside {
      display: none;
    }
  }
</style>
<!-- 

---
import { readAll } from "../lib/markdoc/read";
import { DEFAULT_TAG, blog } from "../lib/markdoc/frontmatter.schema";
import PageLayout from "../layouts/PageLayout.astro";
import PageMeta from "../components/PageMeta.astro";
import { SITE_TITLE } from "../config";
import BlogContent from "@components/BlogContent";
import { Image, getImage } from "astro:assets";
import { formatKorDate } from "src/lib/utils";

export type Posts = typeof posts;
export type Post = Posts[number];

const posts = await readAll({
  directory: "blog",
  frontmatterSchema: blog,
});

const tags = [
  ...new Set([""].concat(posts.flatMap(({ frontmatter }) => frontmatter.tag))),
];
---

<script>
  const urlSearchParams = new URLSearchParams(window.location.search);
  const { tag } = Object.fromEntries(urlSearchParams.entries()) as {
    tag: string;
  };

  const getClassName = (t: string) =>
    t === tag
      ? ["text-highlight", "underline", "decoration-[--palette-primary]"]
      : undefined;

  class TagName extends HTMLElement {
    constructor() {
      super();

      const shadowDom = this.attachShadow({ mode: "open" });
      const template = document.createElement("template");
      template.innerHTML = `
        <slot></slot>
      `;

      this.querySelectorAll(".tag").forEach((el) => {
        const tagName = el.getAttribute("data-tag");
        const className = getClassName(tagName ?? "");
        className && el.classList.add(...className);
      });

      shadowDom.appendChild(template.content.cloneNode(true));
    }
  }

  customElements.define("tag-name", TagName);
</script>

<PageLayout>
  <PageMeta title={`Blog | ${SITE_TITLE}`} slot="meta" />
  <section slot="main">
    <div
      class="relative bottom-0 left-0 mb-2 text-[--text] md:absolute md:right-[calc(100%+20px)] md:left-auto md:top-4 md:w-44"
    >
      <div
        class="hidden p-1 mb-2 border-b-[--border] md:block md:border-b-[1px]"
      >
        태그 목록
      </div>
      <tag-name>
        <ul class="flex flex-col">
          {
            tags.map((t) => (
              <a
                data-tag={t}
                class={`tag unset text-sm hover:underline underline-offset-1`}
                href={`/blog?tag=${t}`}
              >
                {t}
              </a>
            ))
          }
        </ul>
      </tag-name>
    </div>

    <style>
      section {
        position: relative;
      }

      @media (min-width: 640px) {
        section aside {
          display: none;
        }
      }
    </style>
    {
      posts.map(
        (
          { frontmatter: { date, title, description, coverImage }, slug },
          index
        ) => {
          const formattedDate = formatKorDate(date);
          return (
            <>
              {index ? <hr class="border-t-[--border]" /> : null}
              <li
                class="flex justify-between min-h-20 p-2
              truncate overflow-hidden text-ellipsis
              cursor-pointer
              "
              >
                {coverImage}
                <a class="unset" href={`/blog/${slug}`}>
                  <div class="prose prose-lg dark:prose-invert">
                    <h3>{title}</h3>
                    <div class="text-sm mb-2">{description}</div>
                    <div class="text-xs">
                      <time datetime={date.toISOString()}>{formattedDate}</time>
                    </div>
                  </div>
                </a>
              </li>
            </>
          );
        }
      )
    }
  </section>
</PageLayout> -->
