---
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import BlogPostMeta from "../../components/BlogPostMeta.astro";
import { SITE_URL } from "../../meta";
import BaseLayout from "../../components/BaseLayout.astro";
import { getEntries } from "astro:content";
import Article from "../../components/Article.astro";
import Image from "../../components/Image.astro";
import Tag from "../../components/Tag.astro";
import BreadCrumbNav from "../../components/BreadCrumbNav";

interface Props {
  entry: CollectionEntry<"blogs">;
}

export async function getStaticPaths() {
  const blogEntries = await getCollection("blogs");

  return blogEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const {
  entry: {
    render,
    slug,
    data: { title, description, date, coverImage, tags, series },
  },
} = Astro.props;
const { Content, headings } = await render();

const seriesEntries = series ? await getEntries(series) : [];

const ogImageAbsoluteUrl = new URL(coverImage.url, SITE_URL).toString();
---

<BaseLayout>
  <BlogPostMeta
    title={title}
    description={description}
    publishDate={date}
    pagePath={`/blog/${slug}`}
    ogImageAbsoluteUrl={ogImageAbsoluteUrl}
    slot="meta"
  />
  <div slot="main" class="max-w-[65ch] py-10 mx-auto">
    <div class="mx-auto">
      <Article>
        <div>
          <h1 class="mb-1">{title}</h1>
          <p class="not-prose my-0 text-sm">
            <time datetime={date}>{new Date(date).toLocaleDateString()}</time>
          </p>
        </div>
        <div class="text-center">
          <Image className="w-[80%] mx-auto" image={coverImage} />
          <figcaption class="text-sm">{coverImage.caption}</figcaption>
        </div>
        <Content />
      </Article>
      <div>
        <h2 class="text-xl font-semibold mt-10 mb-5">태그</h2>
        <ul class="flex flex-wrap gap-4">
          {
            tags.map((x) => (
              <li>
                <Tag size="md" value={x} />
              </li>
            ))
          }
        </ul>
        <!-- TODO {
          seriesEntries.length > 0 && (
            <>
              <h2 class="text-xl font-semibold mt-10 mb-5">시리즈</h2>
              <ul class="grid-cols-2 gap-4">
                {seriesEntries.map((x) => (
                  <li class="col-span-1">
                    <Image image={x.data.coverImage} width="324" height="162" />
                    <p>{x.data.title}</p>
                  </li>
                ))}
              </ul>
            </>
          )
        } -->
      </div>
    </div>
    <aside
      class="fixed top-[112px]
          right-[calc(50%-37rem)]
          hidden lg:block"
    >
      <BreadCrumbNav headings={headings} client:only />
    </aside>
  </div>
</BaseLayout>
